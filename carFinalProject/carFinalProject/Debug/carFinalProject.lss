
carFinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000c06  00000c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800068  00800068  00000ca2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016de  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000989  00000000  00000000  00002506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad7  00000000  00000000  00002e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00003968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b68  00000000  00000000  000040f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 01 06 	jmp	0xc02	; 0xc02 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	
	int count = 1;
	
	// Enable pin pull-ups for all connected push-buttons
	
	DIO_INIT_BIT(PORT_A, LEFT_B, INPUT);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	DIO_INIT_BIT(PORT_A, RIGHT_B, INPUT);
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	63 e0       	ldi	r22, 0x03	; 3
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	DIO_INIT_BIT(PORT_A, MOVE_STOP_B, INPUT);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	65 e0       	ldi	r22, 0x05	; 5
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	DIO_INIT_BIT(PORT_A, CHNG_SPD_DIR_B, INPUT);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	67 e0       	ldi	r22, 0x07	; 7
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	
	DIO_WRITE_BIT(PORT_A, LEFT_B, HIGH);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
	DIO_WRITE_BIT(PORT_A, RIGHT_B, HIGH);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
	DIO_WRITE_BIT(PORT_A, MOVE_STOP_B, HIGH);
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	65 e0       	ldi	r22, 0x05	; 5
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
	DIO_WRITE_BIT(PORT_A, CHNG_SPD_DIR_B, HIGH);
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	67 e0       	ldi	r22, 0x07	; 7
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
	
	// Set enable pins as output
	
	DIO_INIT_BIT(PORT_B, EN1, OUTPUT);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	DIO_INIT_BIT(PORT_B, EN2, OUTPUT);
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	
	// Set direction control pins as output
	
	DIO_INIT_BIT(PORT_B, M1_B, OUTPUT);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	64 e0       	ldi	r22, 0x04	; 4
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	DIO_INIT_BIT(PORT_B, M1_F, OUTPUT);
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	65 e0       	ldi	r22, 0x05	; 5
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	DIO_INIT_BIT(PORT_B, M2_B, OUTPUT);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	66 e0       	ldi	r22, 0x06	; 6
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	DIO_INIT_BIT(PORT_B, M2_F, OUTPUT);
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	67 e0       	ldi	r22, 0x07	; 7
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_INIT_BIT>
	
	// Set initial direction as forward and initial speed 30%
	
	DIO_WRITE_BIT(PORT_B, M1_F, HIGH);
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	65 e0       	ldi	r22, 0x05	; 5
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
	DIO_WRITE_BIT(PORT_B, M2_F, HIGH);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	67 e0       	ldi	r22, 0x07	; 7
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
	
	// Enable OVF interrupt and global interrupt
	
	Timer_MODEs(MODE0);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Timer_MODEs>
	_TIMSK_ |= (1<<_TOIE0_);
 198:	89 b7       	in	r24, 0x39	; 57
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	89 bf       	out	0x39, r24	; 57
	_SREG_ |= (1<<I);
 19e:	8f b7       	in	r24, 0x3f	; 63
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	8f bf       	out	0x3f, r24	; 63
uint8_t LastState=0;

int main(void)
{
	
	int count = 1;
 1a4:	01 e0       	ldi	r16, 0x01	; 1
 1a6:	10 e0       	ldi	r17, 0x00	; 0
			else if(count == 3){
				duty = DUTY_90;
				direction = 1;
			}
			else if(count == 4){
				duty = DUTY_30;
 1a8:	0f 2e       	mov	r0, r31
 1aa:	fe e1       	ldi	r31, 0x1E	; 30
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f1 2c       	mov	r15, r1
 1b0:	f0 2d       	mov	r31, r0
				direction = 2;
 1b2:	c2 e0       	ldi	r28, 0x02	; 2
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
			else if(count == 2){
				duty = DUTY_60;
				direction = 1;
			}
			else if(count == 3){
				duty = DUTY_90;
 1b6:	0f 2e       	mov	r0, r31
 1b8:	fa e5       	ldi	r31, 0x5A	; 90
 1ba:	6f 2e       	mov	r6, r31
 1bc:	71 2c       	mov	r7, r1
 1be:	f0 2d       	mov	r31, r0
			if (count == 1){
				duty = DUTY_30;
				direction = 1;
			}
			else if(count == 2){
				duty = DUTY_60;
 1c0:	0f 2e       	mov	r0, r31
 1c2:	fc e3       	ldi	r31, 0x3C	; 60
 1c4:	cf 2e       	mov	r12, r31
 1c6:	d1 2c       	mov	r13, r1
 1c8:	f0 2d       	mov	r31, r0
 1ca:	16 c0       	rjmp	.+44     	; 0x1f8 <main+0x166>
	
    while (1) 
    {
		
		while(!DIO_READ_BIT(PORT_A, MOVE_STOP_B)){
			dutyCycle(duty, freq);
 1cc:	80 90 60 00 	lds	r8, 0x0060	; 0x800060 <__data_start>
 1d0:	90 90 61 00 	lds	r9, 0x0061	; 0x800061 <__data_start+0x1>
 1d4:	a0 90 62 00 	lds	r10, 0x0062	; 0x800062 <__data_start+0x2>
 1d8:	b0 90 63 00 	lds	r11, 0x0063	; 0x800063 <__data_start+0x3>
 1dc:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <duty>
 1e0:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <duty+0x1>
 1e4:	07 2e       	mov	r0, r23
 1e6:	00 0c       	add	r0, r0
 1e8:	88 0b       	sbc	r24, r24
 1ea:	99 0b       	sbc	r25, r25
 1ec:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatsisf>
 1f0:	a5 01       	movw	r20, r10
 1f2:	94 01       	movw	r18, r8
 1f4:	0e 94 87 03 	call	0x70e	; 0x70e <dutyCycle>
	
	
    while (1) 
    {
		
		while(!DIO_READ_BIT(PORT_A, MOVE_STOP_B)){
 1f8:	65 e0       	ldi	r22, 0x05	; 5
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_READ_BIT>
 204:	88 23       	and	r24, r24
 206:	11 f3       	breq	.-60     	; 0x1cc <main+0x13a>
			dutyCycle(duty, freq);
		}
		Timer_Stop();
 208:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Timer_Stop>
		while(!DIO_READ_BIT(PORT_A, LEFT_B)){
 20c:	2a c0       	rjmp	.+84     	; 0x262 <main+0x1d0>
			DIO_WRITE_BIT(PORT_B, M1_F, HIGH);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	65 e0       	ldi	r22, 0x05	; 5
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	ce 01       	movw	r24, r28
 218:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
			DIO_WRITE_BIT(PORT_B, M1_B, LOW);
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	ce 01       	movw	r24, r28
 226:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
			DIO_WRITE_BIT(PORT_B, M2_F, LOW);
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	67 e0       	ldi	r22, 0x07	; 7
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	ce 01       	movw	r24, r28
 234:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
			DIO_WRITE_BIT(PORT_B, M2_B, HIGH);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	66 e0       	ldi	r22, 0x06	; 6
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	ce 01       	movw	r24, r28
 242:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
			dutyCycle(DUTY_30, freq);
 246:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 24a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 24e:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
 252:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 ef       	ldi	r24, 0xF0	; 240
 25c:	91 e4       	ldi	r25, 0x41	; 65
 25e:	0e 94 87 03 	call	0x70e	; 0x70e <dutyCycle>
		
		while(!DIO_READ_BIT(PORT_A, MOVE_STOP_B)){
			dutyCycle(duty, freq);
		}
		Timer_Stop();
		while(!DIO_READ_BIT(PORT_A, LEFT_B)){
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_READ_BIT>
 26e:	88 23       	and	r24, r24
 270:	71 f2       	breq	.-100    	; 0x20e <main+0x17c>
			DIO_WRITE_BIT(PORT_B, M1_B, LOW);
			DIO_WRITE_BIT(PORT_B, M2_F, LOW);
			DIO_WRITE_BIT(PORT_B, M2_B, HIGH);
			dutyCycle(DUTY_30, freq);
		}
		Timer_Stop();
 272:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Timer_Stop>
		while(!DIO_READ_BIT(PORT_A, RIGHT_B)){
 276:	2a c0       	rjmp	.+84     	; 0x2cc <main+0x23a>
			DIO_WRITE_BIT(PORT_B, M1_F, LOW);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	65 e0       	ldi	r22, 0x05	; 5
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	ce 01       	movw	r24, r28
 282:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
			DIO_WRITE_BIT(PORT_B, M1_B, HIGH);
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	ce 01       	movw	r24, r28
 290:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
			DIO_WRITE_BIT(PORT_B, M2_F, HIGH);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	67 e0       	ldi	r22, 0x07	; 7
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
			DIO_WRITE_BIT(PORT_B, M2_B, LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	66 e0       	ldi	r22, 0x06	; 6
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	ce 01       	movw	r24, r28
 2ac:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
			dutyCycle(DUTY_30, freq);
 2b0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 2b4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 2b8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
 2bc:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 ef       	ldi	r24, 0xF0	; 240
 2c6:	91 e4       	ldi	r25, 0x41	; 65
 2c8:	0e 94 87 03 	call	0x70e	; 0x70e <dutyCycle>
			DIO_WRITE_BIT(PORT_B, M2_F, LOW);
			DIO_WRITE_BIT(PORT_B, M2_B, HIGH);
			dutyCycle(DUTY_30, freq);
		}
		Timer_Stop();
		while(!DIO_READ_BIT(PORT_A, RIGHT_B)){
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_READ_BIT>
 2d8:	88 23       	and	r24, r24
 2da:	71 f2       	breq	.-100    	; 0x278 <main+0x1e6>
			DIO_WRITE_BIT(PORT_B, M1_B, HIGH);
			DIO_WRITE_BIT(PORT_B, M2_F, HIGH);
			DIO_WRITE_BIT(PORT_B, M2_B, LOW);
			dutyCycle(DUTY_30, freq);
		}
		Timer_Stop();
 2dc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Timer_Stop>
		if(!DIO_READ_BIT(PORT_A, CHNG_SPD_DIR_B)){
 2e0:	67 e0       	ldi	r22, 0x07	; 7
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_READ_BIT>
 2ec:	81 11       	cpse	r24, r1
 2ee:	84 cf       	rjmp	.-248    	; 0x1f8 <main+0x166>
			count++;
 2f0:	0f 5f       	subi	r16, 0xFF	; 255
 2f2:	1f 4f       	sbci	r17, 0xFF	; 255
			if (count == 1){
 2f4:	01 30       	cpi	r16, 0x01	; 1
 2f6:	11 05       	cpc	r17, r1
 2f8:	59 f4       	brne	.+22     	; 0x310 <main+0x27e>
				duty = DUTY_30;
 2fa:	f0 92 67 00 	sts	0x0067, r15	; 0x800067 <duty+0x1>
 2fe:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <duty>
				direction = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <direction+0x1>
 30a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <direction>
 30e:	27 c0       	rjmp	.+78     	; 0x35e <main+0x2cc>
			}
			else if(count == 2){
 310:	02 30       	cpi	r16, 0x02	; 2
 312:	11 05       	cpc	r17, r1
 314:	59 f4       	brne	.+22     	; 0x32c <main+0x29a>
				duty = DUTY_60;
 316:	d0 92 67 00 	sts	0x0067, r13	; 0x800067 <duty+0x1>
 31a:	c0 92 66 00 	sts	0x0066, r12	; 0x800066 <duty>
				direction = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <direction+0x1>
 326:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <direction>
 32a:	19 c0       	rjmp	.+50     	; 0x35e <main+0x2cc>
			}
			else if(count == 3){
 32c:	03 30       	cpi	r16, 0x03	; 3
 32e:	11 05       	cpc	r17, r1
 330:	59 f4       	brne	.+22     	; 0x348 <main+0x2b6>
				duty = DUTY_90;
 332:	70 92 67 00 	sts	0x0067, r7	; 0x800067 <duty+0x1>
 336:	60 92 66 00 	sts	0x0066, r6	; 0x800066 <duty>
				direction = 1;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <direction+0x1>
 342:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <direction>
 346:	0b c0       	rjmp	.+22     	; 0x35e <main+0x2cc>
			}
			else if(count == 4){
 348:	04 30       	cpi	r16, 0x04	; 4
 34a:	11 05       	cpc	r17, r1
 34c:	41 f4       	brne	.+16     	; 0x35e <main+0x2cc>
				duty = DUTY_30;
 34e:	f0 92 67 00 	sts	0x0067, r15	; 0x800067 <duty+0x1>
 352:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <duty>
				direction = 2;
 356:	d0 93 65 00 	sts	0x0065, r29	; 0x800065 <direction+0x1>
 35a:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <direction>
			}
			while(!DIO_READ_BIT(PORT_A, CHNG_SPD_DIR_B));
 35e:	67 e0       	ldi	r22, 0x07	; 7
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_READ_BIT>
 36a:	88 23       	and	r24, r24
 36c:	c1 f3       	breq	.-16     	; 0x35e <main+0x2cc>
 36e:	44 cf       	rjmp	.-376    	; 0x1f8 <main+0x166>

00000370 <DIO_INIT_BIT>:

#include "../../includes/registers.h"
#include "../../includes/definitions.h"
	
void DIO_INIT_BIT(int /*PORTX (i.e. PORT_A, PORT_B..)*/ PORT_NAME, int /*PIN_NO (i.e. 0, 1, 2..)*/ PIN_NO, int /*Direction (i.e. INPUT, OUTPUT)*/ DIR){
	switch (PORT_NAME){
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	91 05       	cpc	r25, r1
 374:	51 f1       	breq	.+84     	; 0x3ca <DIO_INIT_BIT+0x5a>
 376:	1c f4       	brge	.+6      	; 0x37e <DIO_INIT_BIT+0xe>
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	49 f0       	breq	.+18     	; 0x38e <DIO_INIT_BIT+0x1e>
 37c:	08 95       	ret
 37e:	83 30       	cpi	r24, 0x03	; 3
 380:	91 05       	cpc	r25, r1
 382:	09 f4       	brne	.+2      	; 0x386 <DIO_INIT_BIT+0x16>
 384:	40 c0       	rjmp	.+128    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 386:	04 97       	sbiw	r24, 0x04	; 4
 388:	09 f4       	brne	.+2      	; 0x38c <DIO_INIT_BIT+0x1c>
 38a:	5b c0       	rjmp	.+182    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 38c:	08 95       	ret
		case PORT_A:
		switch (DIR){
 38e:	41 15       	cp	r20, r1
 390:	51 05       	cpc	r21, r1
 392:	21 f0       	breq	.+8      	; 0x39c <DIO_INIT_BIT+0x2c>
 394:	41 30       	cpi	r20, 0x01	; 1
 396:	51 05       	cpc	r21, r1
 398:	69 f0       	breq	.+26     	; 0x3b4 <DIO_INIT_BIT+0x44>
 39a:	08 95       	ret
			case INPUT:
			PA_DIR &= ~(1<<PIN_NO);
 39c:	2a b3       	in	r18, 0x1a	; 26
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_INIT_BIT+0x38>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_INIT_BIT+0x34>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	8a bb       	out	0x1a, r24	; 26
			break;
 3b2:	08 95       	ret
			case OUTPUT:
			PA_DIR |= (1<<PIN_NO);
 3b4:	2a b3       	in	r18, 0x1a	; 26
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_INIT_BIT+0x50>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_INIT_BIT+0x4c>
 3c4:	82 2b       	or	r24, r18
 3c6:	8a bb       	out	0x1a, r24	; 26
		break;}
 3c8:	08 95       	ret
		break;
		
		case PORT_B:
		switch (DIR){
 3ca:	41 15       	cp	r20, r1
 3cc:	51 05       	cpc	r21, r1
 3ce:	21 f0       	breq	.+8      	; 0x3d8 <DIO_INIT_BIT+0x68>
 3d0:	41 30       	cpi	r20, 0x01	; 1
 3d2:	51 05       	cpc	r21, r1
 3d4:	69 f0       	breq	.+26     	; 0x3f0 <DIO_INIT_BIT+0x80>
 3d6:	08 95       	ret
			case INPUT:
			PB_DIR &= ~(1<<PIN_NO);
 3d8:	27 b3       	in	r18, 0x17	; 23
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_INIT_BIT+0x74>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_INIT_BIT+0x70>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	87 bb       	out	0x17, r24	; 23
			break;
 3ee:	08 95       	ret
			case OUTPUT:
			PB_DIR |= (1<<PIN_NO);
 3f0:	27 b3       	in	r18, 0x17	; 23
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_INIT_BIT+0x8c>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_INIT_BIT+0x88>
 400:	82 2b       	or	r24, r18
 402:	87 bb       	out	0x17, r24	; 23
		break;}
 404:	08 95       	ret
		
		break;
		
		case PORT_C:
		switch (DIR){
 406:	41 15       	cp	r20, r1
 408:	51 05       	cpc	r21, r1
 40a:	21 f0       	breq	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	41 30       	cpi	r20, 0x01	; 1
 40e:	51 05       	cpc	r21, r1
 410:	69 f0       	breq	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 412:	08 95       	ret
			case INPUT:
			PC_DIR &= ~(1<<PIN_NO);
 414:	24 b3       	in	r18, 0x14	; 20
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	80 95       	com	r24
 426:	82 23       	and	r24, r18
 428:	84 bb       	out	0x14, r24	; 20
			break;
 42a:	08 95       	ret
			case OUTPUT:
			PC_DIR |= (1<<PIN_NO);
 42c:	24 b3       	in	r18, 0x14	; 20
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	82 2b       	or	r24, r18
 43e:	84 bb       	out	0x14, r24	; 20
		break;}
 440:	08 95       	ret
		
		break;
		
		case PORT_D:
		switch (DIR){
 442:	41 15       	cp	r20, r1
 444:	51 05       	cpc	r21, r1
 446:	21 f0       	breq	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 448:	41 30       	cpi	r20, 0x01	; 1
 44a:	51 05       	cpc	r21, r1
 44c:	69 f0       	breq	.+26     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44e:	08 95       	ret
			case INPUT:
			PD_DIR &= ~(1<<PIN_NO);
 450:	21 b3       	in	r18, 0x11	; 17
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	80 95       	com	r24
 462:	82 23       	and	r24, r18
 464:	81 bb       	out	0x11, r24	; 17
			break;
 466:	08 95       	ret
			case OUTPUT:
			PD_DIR |= (1<<PIN_NO);
 468:	21 b3       	in	r18, 0x11	; 17
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 478:	82 2b       	or	r24, r18
 47a:	81 bb       	out	0x11, r24	; 17
 47c:	08 95       	ret

0000047e <DIO_WRITE_BIT>:
		
	}
}

void DIO_WRITE_BIT(int /*PORTX (i.e. PORT_A, PORT_B..)*/ PORT_NAME, int /*PIN_NO (i.e. 0, 1, 2..)*/ PIN_NO, int /*LEVEL (i.e. LOW, HIGH)*/ LEVEL){
	switch (PORT_NAME){
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	91 05       	cpc	r25, r1
 482:	51 f1       	breq	.+84     	; 0x4d8 <DIO_WRITE_BIT+0x5a>
 484:	1c f4       	brge	.+6      	; 0x48c <DIO_WRITE_BIT+0xe>
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	49 f0       	breq	.+18     	; 0x49c <DIO_WRITE_BIT+0x1e>
 48a:	08 95       	ret
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	91 05       	cpc	r25, r1
 490:	09 f4       	brne	.+2      	; 0x494 <DIO_WRITE_BIT+0x16>
 492:	40 c0       	rjmp	.+128    	; 0x514 <DIO_WRITE_BIT+0x96>
 494:	04 97       	sbiw	r24, 0x04	; 4
 496:	09 f4       	brne	.+2      	; 0x49a <DIO_WRITE_BIT+0x1c>
 498:	5b c0       	rjmp	.+182    	; 0x550 <DIO_WRITE_BIT+0xd2>
 49a:	08 95       	ret
		case PORT_A:
		switch (LEVEL){
 49c:	41 15       	cp	r20, r1
 49e:	51 05       	cpc	r21, r1
 4a0:	21 f0       	breq	.+8      	; 0x4aa <DIO_WRITE_BIT+0x2c>
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	51 05       	cpc	r21, r1
 4a6:	69 f0       	breq	.+26     	; 0x4c2 <DIO_WRITE_BIT+0x44>
 4a8:	08 95       	ret
			case LOW:
			PA_OUT &= ~(1<<PIN_NO);
 4aa:	2b b3       	in	r18, 0x1b	; 27
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_WRITE_BIT+0x38>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_WRITE_BIT+0x34>
 4ba:	80 95       	com	r24
 4bc:	82 23       	and	r24, r18
 4be:	8b bb       	out	0x1b, r24	; 27
			break;
 4c0:	08 95       	ret
			case HIGH:
			PA_OUT |= (1<<PIN_NO);
 4c2:	2b b3       	in	r18, 0x1b	; 27
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_WRITE_BIT+0x50>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_WRITE_BIT+0x4c>
 4d2:	82 2b       	or	r24, r18
 4d4:	8b bb       	out	0x1b, r24	; 27
		break;}
 4d6:	08 95       	ret
		break;
		
		case PORT_B:
		switch (LEVEL){
 4d8:	41 15       	cp	r20, r1
 4da:	51 05       	cpc	r21, r1
 4dc:	21 f0       	breq	.+8      	; 0x4e6 <DIO_WRITE_BIT+0x68>
 4de:	41 30       	cpi	r20, 0x01	; 1
 4e0:	51 05       	cpc	r21, r1
 4e2:	69 f0       	breq	.+26     	; 0x4fe <DIO_WRITE_BIT+0x80>
 4e4:	08 95       	ret
			case LOW:
			PB_OUT &= ~(1<<PIN_NO);
 4e6:	28 b3       	in	r18, 0x18	; 24
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_WRITE_BIT+0x74>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_WRITE_BIT+0x70>
 4f6:	80 95       	com	r24
 4f8:	82 23       	and	r24, r18
 4fa:	88 bb       	out	0x18, r24	; 24
			break;
 4fc:	08 95       	ret
			case HIGH:
			PB_OUT |= (1<<PIN_NO);
 4fe:	28 b3       	in	r18, 0x18	; 24
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_WRITE_BIT+0x8c>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_WRITE_BIT+0x88>
 50e:	82 2b       	or	r24, r18
 510:	88 bb       	out	0x18, r24	; 24
		break;}
 512:	08 95       	ret
		
		break;
		
		case PORT_C:
		switch (LEVEL){
 514:	41 15       	cp	r20, r1
 516:	51 05       	cpc	r21, r1
 518:	21 f0       	breq	.+8      	; 0x522 <DIO_WRITE_BIT+0xa4>
 51a:	41 30       	cpi	r20, 0x01	; 1
 51c:	51 05       	cpc	r21, r1
 51e:	69 f0       	breq	.+26     	; 0x53a <DIO_WRITE_BIT+0xbc>
 520:	08 95       	ret
			case LOW:
			PC_OUT &= ~(1<<PIN_NO);
 522:	25 b3       	in	r18, 0x15	; 21
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_WRITE_BIT+0xb0>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_WRITE_BIT+0xac>
 532:	80 95       	com	r24
 534:	82 23       	and	r24, r18
 536:	85 bb       	out	0x15, r24	; 21
			break;
 538:	08 95       	ret
			case HIGH:
			PC_OUT |= (1<<PIN_NO);
 53a:	25 b3       	in	r18, 0x15	; 21
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_WRITE_BIT+0xc8>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_WRITE_BIT+0xc4>
 54a:	82 2b       	or	r24, r18
 54c:	85 bb       	out	0x15, r24	; 21
		break;}
 54e:	08 95       	ret
		
		break;
		
		case PORT_D:
		switch (LEVEL){
 550:	41 15       	cp	r20, r1
 552:	51 05       	cpc	r21, r1
 554:	21 f0       	breq	.+8      	; 0x55e <DIO_WRITE_BIT+0xe0>
 556:	41 30       	cpi	r20, 0x01	; 1
 558:	51 05       	cpc	r21, r1
 55a:	69 f0       	breq	.+26     	; 0x576 <DIO_WRITE_BIT+0xf8>
 55c:	08 95       	ret
			case LOW:
			PD_OUT &= ~(1<<PIN_NO);
 55e:	22 b3       	in	r18, 0x12	; 18
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_WRITE_BIT+0xec>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_WRITE_BIT+0xe8>
 56e:	80 95       	com	r24
 570:	82 23       	and	r24, r18
 572:	82 bb       	out	0x12, r24	; 18
			break;
 574:	08 95       	ret
			case HIGH:
			PD_OUT |= (1<<PIN_NO);
 576:	22 b3       	in	r18, 0x12	; 18
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_WRITE_BIT+0x104>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_WRITE_BIT+0x100>
 586:	82 2b       	or	r24, r18
 588:	82 bb       	out	0x12, r24	; 18
 58a:	08 95       	ret

0000058c <DIO_READ_BIT>:
	}
}

uint8_t DIO_READ_BIT(int /*PORTX (i.e. PORT_A, PORT_B..)*/ PORT_NAME, int /*PIN_NO (i.e. 0, 1, 2..)*/ PIN_NO){
	uint8_t read_data = 0;
	switch (PORT_NAME){
 58c:	82 30       	cpi	r24, 0x02	; 2
 58e:	91 05       	cpc	r25, r1
 590:	99 f0       	breq	.+38     	; 0x5b8 <DIO_READ_BIT+0x2c>
 592:	1c f4       	brge	.+6      	; 0x59a <DIO_READ_BIT+0xe>
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	39 f0       	breq	.+14     	; 0x5a6 <DIO_READ_BIT+0x1a>
 598:	2a c0       	rjmp	.+84     	; 0x5ee <DIO_READ_BIT+0x62>
 59a:	83 30       	cpi	r24, 0x03	; 3
 59c:	91 05       	cpc	r25, r1
 59e:	a9 f0       	breq	.+42     	; 0x5ca <DIO_READ_BIT+0x3e>
 5a0:	04 97       	sbiw	r24, 0x04	; 4
 5a2:	e1 f0       	breq	.+56     	; 0x5dc <DIO_READ_BIT+0x50>
 5a4:	24 c0       	rjmp	.+72     	; 0x5ee <DIO_READ_BIT+0x62>
		case PORT_A:
		read_data = PA_IN;
 5a6:	89 b3       	in	r24, 0x19	; 25
		read_data = read_data>>PIN_NO;
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_READ_BIT+0x24>
 5ac:	95 95       	asr	r25
 5ae:	87 95       	ror	r24
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_READ_BIT+0x20>
		read_data &= 0X01;
 5b4:	81 70       	andi	r24, 0x01	; 1
		break;
 5b6:	08 95       	ret
		
		case PORT_B:
		read_data = PB_IN;
 5b8:	86 b3       	in	r24, 0x16	; 22
		read_data = read_data>>PIN_NO;
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_READ_BIT+0x36>
 5be:	95 95       	asr	r25
 5c0:	87 95       	ror	r24
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_READ_BIT+0x32>
		read_data &= 0X01;
 5c6:	81 70       	andi	r24, 0x01	; 1
		break;
 5c8:	08 95       	ret
		
		case PORT_C:
		read_data = PC_IN;
 5ca:	83 b3       	in	r24, 0x13	; 19
		read_data = read_data>>PIN_NO;
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_READ_BIT+0x48>
 5d0:	95 95       	asr	r25
 5d2:	87 95       	ror	r24
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_READ_BIT+0x44>
		read_data &= 0X01;
 5d8:	81 70       	andi	r24, 0x01	; 1
		break;
 5da:	08 95       	ret
		
		case PORT_D:
		read_data = PD_IN;
 5dc:	80 b3       	in	r24, 0x10	; 16
		read_data = read_data>>PIN_NO;
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_READ_BIT+0x5a>
 5e2:	95 95       	asr	r25
 5e4:	87 95       	ror	r24
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_READ_BIT+0x56>
		read_data &= 0X01;
 5ea:	81 70       	andi	r24, 0x01	; 1
		break;
 5ec:	08 95       	ret
		
	}
}

uint8_t DIO_READ_BIT(int /*PORTX (i.e. PORT_A, PORT_B..)*/ PORT_NAME, int /*PIN_NO (i.e. 0, 1, 2..)*/ PIN_NO){
	uint8_t read_data = 0;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
	}
	
	return read_data;
}
 5f0:	08 95       	ret

000005f2 <__vector_11>:
extern uint8_t flag;
extern float TON, TOFF;

void __vector_11 (void)
{
	if (flag==0)
 5f2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <flag>
 5f6:	81 11       	cpse	r24, r1
 5f8:	1f c0       	rjmp	.+62     	; 0x638 <__vector_11+0x46>
	{
		DIO_WRITE_BIT(PORT_B, EN1 , HIGH);
 5fa:	41 e0       	ldi	r20, 0x01	; 1
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
		DIO_WRITE_BIT(PORT_B, EN2 , HIGH);
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	62 e0       	ldi	r22, 0x02	; 2
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
		_TCNT0_=TON;
 61a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
 61e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x1>
 622:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
 626:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x3>
 62a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fixunssfsi>
 62e:	62 bf       	out	0x32, r22	; 50
		flag=1;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <flag>
 636:	08 95       	ret
	}
	else
	{
		DIO_WRITE_BIT(PORT_B, EN1 , LOW);
 638:	40 e0       	ldi	r20, 0x00	; 0
 63a:	50 e0       	ldi	r21, 0x00	; 0
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
		DIO_WRITE_BIT(PORT_B, EN2 , LOW);
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	50 e0       	ldi	r21, 0x00	; 0
 64c:	62 e0       	ldi	r22, 0x02	; 2
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WRITE_BIT>
		_TCNT0_= TOFF;
 658:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <TOFF>
 65c:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <TOFF+0x1>
 660:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <TOFF+0x2>
 664:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <TOFF+0x3>
 668:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fixunssfsi>
 66c:	62 bf       	out	0x32, r22	; 50
		flag=0;
 66e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <flag>
 672:	08 95       	ret

00000674 <SET_prescaler>:
			SET_prescaler(Prescaler_1024_);
			wait_ovf();
			Timer_Stop();
			

}
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	19 f4       	brne	.+6      	; 0x67e <SET_prescaler+0xa>
 678:	83 b7       	in	r24, 0x33	; 51
 67a:	83 bf       	out	0x33, r24	; 51
 67c:	08 95       	ret
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	91 05       	cpc	r25, r1
 682:	21 f4       	brne	.+8      	; 0x68c <SET_prescaler+0x18>
 684:	83 b7       	in	r24, 0x33	; 51
 686:	81 60       	ori	r24, 0x01	; 1
 688:	83 bf       	out	0x33, r24	; 51
 68a:	08 95       	ret
 68c:	88 30       	cpi	r24, 0x08	; 8
 68e:	91 05       	cpc	r25, r1
 690:	21 f4       	brne	.+8      	; 0x69a <SET_prescaler+0x26>
 692:	83 b7       	in	r24, 0x33	; 51
 694:	82 60       	ori	r24, 0x02	; 2
 696:	83 bf       	out	0x33, r24	; 51
 698:	08 95       	ret
 69a:	80 34       	cpi	r24, 0x40	; 64
 69c:	91 05       	cpc	r25, r1
 69e:	21 f4       	brne	.+8      	; 0x6a8 <SET_prescaler+0x34>
 6a0:	83 b7       	in	r24, 0x33	; 51
 6a2:	83 60       	ori	r24, 0x03	; 3
 6a4:	83 bf       	out	0x33, r24	; 51
 6a6:	08 95       	ret
 6a8:	81 15       	cp	r24, r1
 6aa:	21 e0       	ldi	r18, 0x01	; 1
 6ac:	92 07       	cpc	r25, r18
 6ae:	21 f4       	brne	.+8      	; 0x6b8 <SET_prescaler+0x44>
 6b0:	83 b7       	in	r24, 0x33	; 51
 6b2:	84 60       	ori	r24, 0x04	; 4
 6b4:	83 bf       	out	0x33, r24	; 51
 6b6:	08 95       	ret
 6b8:	81 15       	cp	r24, r1
 6ba:	94 40       	sbci	r25, 0x04	; 4
 6bc:	19 f4       	brne	.+6      	; 0x6c4 <SET_prescaler+0x50>
 6be:	83 b7       	in	r24, 0x33	; 51
 6c0:	85 60       	ori	r24, 0x05	; 5
 6c2:	83 bf       	out	0x33, r24	; 51
 6c4:	08 95       	ret

000006c6 <Timer_Stop>:
 6c6:	88 b7       	in	r24, 0x38	; 56
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	88 bf       	out	0x38, r24	; 56
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 3a 03 	call	0x674	; 0x674 <SET_prescaler>
 6d4:	08 95       	ret

000006d6 <Timer_MODEs>:


/***************** init********************************/
void Timer_MODEs(uint8_t T_mode)
{
	if(T_mode==MODE0)
 6d6:	81 11       	cpse	r24, r1
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <Timer_MODEs+0xc>
	{
		_TCCR0_ &=~((1<<_WGM00_)|(1<<_WGM01_));
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	87 7b       	andi	r24, 0xB7	; 183
 6de:	83 bf       	out	0x33, r24	; 51
 6e0:	08 95       	ret
	}
	else if (T_mode==MODE1)
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	31 f4       	brne	.+12     	; 0x6f2 <Timer_MODEs+0x1c>
	{
		_TCCR0_ |= (1<<_WGM01_);
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	88 60       	ori	r24, 0x08	; 8
 6ea:	83 bf       	out	0x33, r24	; 51
		_TCCR0_ &= !(1<<_WGM00_);
 6ec:	83 b7       	in	r24, 0x33	; 51
 6ee:	13 be       	out	0x33, r1	; 51
 6f0:	08 95       	ret
	}
	else if(T_mode==MODE2)
 6f2:	82 30       	cpi	r24, 0x02	; 2
 6f4:	31 f4       	brne	.+12     	; 0x702 <Timer_MODEs+0x2c>
	{
		_TCCR0_ |= (1<<_WGM00_);
 6f6:	83 b7       	in	r24, 0x33	; 51
 6f8:	80 64       	ori	r24, 0x40	; 64
 6fa:	83 bf       	out	0x33, r24	; 51
		_TCCR0_ &= !(1<<_WGM01_);		
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	13 be       	out	0x33, r1	; 51
 700:	08 95       	ret
	}
	else if(T_mode==Fast_PWM)
 702:	83 30       	cpi	r24, 0x03	; 3
 704:	19 f4       	brne	.+6      	; 0x70c <Timer_MODEs+0x36>
	{
		_TCCR0_ |=(1<< _WGM00_)|(1<< _WGM01_);
 706:	83 b7       	in	r24, 0x33	; 51
 708:	88 64       	ori	r24, 0x48	; 72
 70a:	83 bf       	out	0x33, r24	; 51
 70c:	08 95       	ret

0000070e <dutyCycle>:
#include "../../includes/definitions.h"

extern float TON, TOFF, period;

void dutyCycle(float duty, float freq)
{
 70e:	8f 92       	push	r8
 710:	9f 92       	push	r9
 712:	af 92       	push	r10
 714:	bf 92       	push	r11
 716:	cf 92       	push	r12
 718:	df 92       	push	r13
 71a:	ef 92       	push	r14
 71c:	ff 92       	push	r15
 71e:	4b 01       	movw	r8, r22
 720:	5c 01       	movw	r10, r24
	period = 1/freq;
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	80 e8       	ldi	r24, 0x80	; 128
 728:	9f e3       	ldi	r25, 0x3F	; 63
 72a:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3>
 72e:	6b 01       	movw	r12, r22
 730:	7c 01       	movw	r14, r24
 732:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <period>
 736:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <period+0x1>
 73a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <period+0x2>
 73e:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <period+0x3>
	TON=(period*duty)/100;
 742:	a5 01       	movw	r20, r10
 744:	94 01       	movw	r18, r8
 746:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	48 ec       	ldi	r20, 0xC8	; 200
 750:	52 e4       	ldi	r21, 0x42	; 66
 752:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3>
 756:	4b 01       	movw	r8, r22
 758:	5c 01       	movw	r10, r24
	TOFF=period-TON;
	TON= 255-((CLOCK_INTERNAL*TON)/Prescaler_256_);
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	34 e2       	ldi	r19, 0x24	; 36
 75e:	44 e7       	ldi	r20, 0x74	; 116
 760:	59 e4       	ldi	r21, 0x49	; 73
 762:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	40 e8       	ldi	r20, 0x80	; 128
 76c:	5b e3       	ldi	r21, 0x3B	; 59
 76e:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 772:	9b 01       	movw	r18, r22
 774:	ac 01       	movw	r20, r24
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	8f e7       	ldi	r24, 0x7F	; 127
 77c:	93 e4       	ldi	r25, 0x43	; 67
 77e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__subsf3>
 782:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__data_end>
 786:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <__data_end+0x1>
 78a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end+0x2>
 78e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x3>
	TOFF= 255-((CLOCK_INTERNAL*TOFF)/Prescaler_256_);
 792:	a5 01       	movw	r20, r10
 794:	94 01       	movw	r18, r8
 796:	c7 01       	movw	r24, r14
 798:	b6 01       	movw	r22, r12
 79a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__subsf3>
 79e:	20 e0       	ldi	r18, 0x00	; 0
 7a0:	34 e2       	ldi	r19, 0x24	; 36
 7a2:	44 e7       	ldi	r20, 0x74	; 116
 7a4:	59 e4       	ldi	r21, 0x49	; 73
 7a6:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 7aa:	20 e0       	ldi	r18, 0x00	; 0
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	40 e8       	ldi	r20, 0x80	; 128
 7b0:	5b e3       	ldi	r21, 0x3B	; 59
 7b2:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 7b6:	9b 01       	movw	r18, r22
 7b8:	ac 01       	movw	r20, r24
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	8f e7       	ldi	r24, 0x7F	; 127
 7c0:	93 e4       	ldi	r25, 0x43	; 67
 7c2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__subsf3>
 7c6:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <TOFF>
 7ca:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <TOFF+0x1>
 7ce:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <TOFF+0x2>
 7d2:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <TOFF+0x3>
	SET_prescaler(Prescaler_256_);
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	0e 94 3a 03 	call	0x674	; 0x674 <SET_prescaler>
	
 7de:	ff 90       	pop	r15
 7e0:	ef 90       	pop	r14
 7e2:	df 90       	pop	r13
 7e4:	cf 90       	pop	r12
 7e6:	bf 90       	pop	r11
 7e8:	af 90       	pop	r10
 7ea:	9f 90       	pop	r9
 7ec:	8f 90       	pop	r8
 7ee:	08 95       	ret

000007f0 <__subsf3>:
 7f0:	50 58       	subi	r21, 0x80	; 128

000007f2 <__addsf3>:
 7f2:	bb 27       	eor	r27, r27
 7f4:	aa 27       	eor	r26, r26
 7f6:	0e 94 10 04 	call	0x820	; 0x820 <__addsf3x>
 7fa:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 7fe:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 802:	38 f0       	brcs	.+14     	; 0x812 <__addsf3+0x20>
 804:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 808:	20 f0       	brcs	.+8      	; 0x812 <__addsf3+0x20>
 80a:	39 f4       	brne	.+14     	; 0x81a <__addsf3+0x28>
 80c:	9f 3f       	cpi	r25, 0xFF	; 255
 80e:	19 f4       	brne	.+6      	; 0x816 <__addsf3+0x24>
 810:	26 f4       	brtc	.+8      	; 0x81a <__addsf3+0x28>
 812:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>
 816:	0e f4       	brtc	.+2      	; 0x81a <__addsf3+0x28>
 818:	e0 95       	com	r30
 81a:	e7 fb       	bst	r30, 7
 81c:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>

00000820 <__addsf3x>:
 820:	e9 2f       	mov	r30, r25
 822:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 826:	58 f3       	brcs	.-42     	; 0x7fe <__addsf3+0xc>
 828:	ba 17       	cp	r27, r26
 82a:	62 07       	cpc	r22, r18
 82c:	73 07       	cpc	r23, r19
 82e:	84 07       	cpc	r24, r20
 830:	95 07       	cpc	r25, r21
 832:	20 f0       	brcs	.+8      	; 0x83c <__addsf3x+0x1c>
 834:	79 f4       	brne	.+30     	; 0x854 <__addsf3x+0x34>
 836:	a6 f5       	brtc	.+104    	; 0x8a0 <__stack+0x41>
 838:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_zero>
 83c:	0e f4       	brtc	.+2      	; 0x840 <__addsf3x+0x20>
 83e:	e0 95       	com	r30
 840:	0b 2e       	mov	r0, r27
 842:	ba 2f       	mov	r27, r26
 844:	a0 2d       	mov	r26, r0
 846:	0b 01       	movw	r0, r22
 848:	b9 01       	movw	r22, r18
 84a:	90 01       	movw	r18, r0
 84c:	0c 01       	movw	r0, r24
 84e:	ca 01       	movw	r24, r20
 850:	a0 01       	movw	r20, r0
 852:	11 24       	eor	r1, r1
 854:	ff 27       	eor	r31, r31
 856:	59 1b       	sub	r21, r25
 858:	99 f0       	breq	.+38     	; 0x880 <__stack+0x21>
 85a:	59 3f       	cpi	r21, 0xF9	; 249
 85c:	50 f4       	brcc	.+20     	; 0x872 <__stack+0x13>
 85e:	50 3e       	cpi	r21, 0xE0	; 224
 860:	68 f1       	brcs	.+90     	; 0x8bc <__stack+0x5d>
 862:	1a 16       	cp	r1, r26
 864:	f0 40       	sbci	r31, 0x00	; 0
 866:	a2 2f       	mov	r26, r18
 868:	23 2f       	mov	r18, r19
 86a:	34 2f       	mov	r19, r20
 86c:	44 27       	eor	r20, r20
 86e:	58 5f       	subi	r21, 0xF8	; 248
 870:	f3 cf       	rjmp	.-26     	; 0x858 <__addsf3x+0x38>
 872:	46 95       	lsr	r20
 874:	37 95       	ror	r19
 876:	27 95       	ror	r18
 878:	a7 95       	ror	r26
 87a:	f0 40       	sbci	r31, 0x00	; 0
 87c:	53 95       	inc	r21
 87e:	c9 f7       	brne	.-14     	; 0x872 <__stack+0x13>
 880:	7e f4       	brtc	.+30     	; 0x8a0 <__stack+0x41>
 882:	1f 16       	cp	r1, r31
 884:	ba 0b       	sbc	r27, r26
 886:	62 0b       	sbc	r22, r18
 888:	73 0b       	sbc	r23, r19
 88a:	84 0b       	sbc	r24, r20
 88c:	ba f0       	brmi	.+46     	; 0x8bc <__stack+0x5d>
 88e:	91 50       	subi	r25, 0x01	; 1
 890:	a1 f0       	breq	.+40     	; 0x8ba <__stack+0x5b>
 892:	ff 0f       	add	r31, r31
 894:	bb 1f       	adc	r27, r27
 896:	66 1f       	adc	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	c2 f7       	brpl	.-16     	; 0x88e <__stack+0x2f>
 89e:	0e c0       	rjmp	.+28     	; 0x8bc <__stack+0x5d>
 8a0:	ba 0f       	add	r27, r26
 8a2:	62 1f       	adc	r22, r18
 8a4:	73 1f       	adc	r23, r19
 8a6:	84 1f       	adc	r24, r20
 8a8:	48 f4       	brcc	.+18     	; 0x8bc <__stack+0x5d>
 8aa:	87 95       	ror	r24
 8ac:	77 95       	ror	r23
 8ae:	67 95       	ror	r22
 8b0:	b7 95       	ror	r27
 8b2:	f7 95       	ror	r31
 8b4:	9e 3f       	cpi	r25, 0xFE	; 254
 8b6:	08 f0       	brcs	.+2      	; 0x8ba <__stack+0x5b>
 8b8:	b0 cf       	rjmp	.-160    	; 0x81a <__addsf3+0x28>
 8ba:	93 95       	inc	r25
 8bc:	88 0f       	add	r24, r24
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <__stack+0x63>
 8c0:	99 27       	eor	r25, r25
 8c2:	ee 0f       	add	r30, r30
 8c4:	97 95       	ror	r25
 8c6:	87 95       	ror	r24
 8c8:	08 95       	ret

000008ca <__divsf3>:
 8ca:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divsf3x>
 8ce:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 8d2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 8d6:	58 f0       	brcs	.+22     	; 0x8ee <__divsf3+0x24>
 8d8:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 8dc:	40 f0       	brcs	.+16     	; 0x8ee <__divsf3+0x24>
 8de:	29 f4       	brne	.+10     	; 0x8ea <__divsf3+0x20>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	29 f0       	breq	.+10     	; 0x8ee <__divsf3+0x24>
 8e4:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 8e8:	51 11       	cpse	r21, r1
 8ea:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 8ee:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>

000008f2 <__divsf3x>:
 8f2:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 8f6:	68 f3       	brcs	.-38     	; 0x8d2 <__divsf3+0x8>

000008f8 <__divsf3_pse>:
 8f8:	99 23       	and	r25, r25
 8fa:	b1 f3       	breq	.-20     	; 0x8e8 <__divsf3+0x1e>
 8fc:	55 23       	and	r21, r21
 8fe:	91 f3       	breq	.-28     	; 0x8e4 <__divsf3+0x1a>
 900:	95 1b       	sub	r25, r21
 902:	55 0b       	sbc	r21, r21
 904:	bb 27       	eor	r27, r27
 906:	aa 27       	eor	r26, r26
 908:	62 17       	cp	r22, r18
 90a:	73 07       	cpc	r23, r19
 90c:	84 07       	cpc	r24, r20
 90e:	38 f0       	brcs	.+14     	; 0x91e <__divsf3_pse+0x26>
 910:	9f 5f       	subi	r25, 0xFF	; 255
 912:	5f 4f       	sbci	r21, 0xFF	; 255
 914:	22 0f       	add	r18, r18
 916:	33 1f       	adc	r19, r19
 918:	44 1f       	adc	r20, r20
 91a:	aa 1f       	adc	r26, r26
 91c:	a9 f3       	breq	.-22     	; 0x908 <__divsf3_pse+0x10>
 91e:	35 d0       	rcall	.+106    	; 0x98a <__divsf3_pse+0x92>
 920:	0e 2e       	mov	r0, r30
 922:	3a f0       	brmi	.+14     	; 0x932 <__divsf3_pse+0x3a>
 924:	e0 e8       	ldi	r30, 0x80	; 128
 926:	32 d0       	rcall	.+100    	; 0x98c <__divsf3_pse+0x94>
 928:	91 50       	subi	r25, 0x01	; 1
 92a:	50 40       	sbci	r21, 0x00	; 0
 92c:	e6 95       	lsr	r30
 92e:	00 1c       	adc	r0, r0
 930:	ca f7       	brpl	.-14     	; 0x924 <__divsf3_pse+0x2c>
 932:	2b d0       	rcall	.+86     	; 0x98a <__divsf3_pse+0x92>
 934:	fe 2f       	mov	r31, r30
 936:	29 d0       	rcall	.+82     	; 0x98a <__divsf3_pse+0x92>
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	bb 1f       	adc	r27, r27
 940:	26 17       	cp	r18, r22
 942:	37 07       	cpc	r19, r23
 944:	48 07       	cpc	r20, r24
 946:	ab 07       	cpc	r26, r27
 948:	b0 e8       	ldi	r27, 0x80	; 128
 94a:	09 f0       	breq	.+2      	; 0x94e <__divsf3_pse+0x56>
 94c:	bb 0b       	sbc	r27, r27
 94e:	80 2d       	mov	r24, r0
 950:	bf 01       	movw	r22, r30
 952:	ff 27       	eor	r31, r31
 954:	93 58       	subi	r25, 0x83	; 131
 956:	5f 4f       	sbci	r21, 0xFF	; 255
 958:	3a f0       	brmi	.+14     	; 0x968 <__divsf3_pse+0x70>
 95a:	9e 3f       	cpi	r25, 0xFE	; 254
 95c:	51 05       	cpc	r21, r1
 95e:	78 f0       	brcs	.+30     	; 0x97e <__divsf3_pse+0x86>
 960:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 964:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	e4 f3       	brlt	.-8      	; 0x964 <__divsf3_pse+0x6c>
 96c:	98 3e       	cpi	r25, 0xE8	; 232
 96e:	d4 f3       	brlt	.-12     	; 0x964 <__divsf3_pse+0x6c>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b7 95       	ror	r27
 978:	f7 95       	ror	r31
 97a:	9f 5f       	subi	r25, 0xFF	; 255
 97c:	c9 f7       	brne	.-14     	; 0x970 <__divsf3_pse+0x78>
 97e:	88 0f       	add	r24, r24
 980:	91 1d       	adc	r25, r1
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	97 f9       	bld	r25, 7
 988:	08 95       	ret
 98a:	e1 e0       	ldi	r30, 0x01	; 1
 98c:	66 0f       	add	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	bb 1f       	adc	r27, r27
 994:	62 17       	cp	r22, r18
 996:	73 07       	cpc	r23, r19
 998:	84 07       	cpc	r24, r20
 99a:	ba 07       	cpc	r27, r26
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <__divsf3_pse+0xae>
 99e:	62 1b       	sub	r22, r18
 9a0:	73 0b       	sbc	r23, r19
 9a2:	84 0b       	sbc	r24, r20
 9a4:	ba 0b       	sbc	r27, r26
 9a6:	ee 1f       	adc	r30, r30
 9a8:	88 f7       	brcc	.-30     	; 0x98c <__divsf3_pse+0x94>
 9aa:	e0 95       	com	r30
 9ac:	08 95       	ret

000009ae <__fixunssfsi>:
 9ae:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_splitA>
 9b2:	88 f0       	brcs	.+34     	; 0x9d6 <__fixunssfsi+0x28>
 9b4:	9f 57       	subi	r25, 0x7F	; 127
 9b6:	98 f0       	brcs	.+38     	; 0x9de <__fixunssfsi+0x30>
 9b8:	b9 2f       	mov	r27, r25
 9ba:	99 27       	eor	r25, r25
 9bc:	b7 51       	subi	r27, 0x17	; 23
 9be:	b0 f0       	brcs	.+44     	; 0x9ec <__fixunssfsi+0x3e>
 9c0:	e1 f0       	breq	.+56     	; 0x9fa <__fixunssfsi+0x4c>
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a f0       	brmi	.+6      	; 0x9d2 <__fixunssfsi+0x24>
 9cc:	ba 95       	dec	r27
 9ce:	c9 f7       	brne	.-14     	; 0x9c2 <__fixunssfsi+0x14>
 9d0:	14 c0       	rjmp	.+40     	; 0x9fa <__fixunssfsi+0x4c>
 9d2:	b1 30       	cpi	r27, 0x01	; 1
 9d4:	91 f0       	breq	.+36     	; 0x9fa <__fixunssfsi+0x4c>
 9d6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_zero>
 9da:	b1 e0       	ldi	r27, 0x01	; 1
 9dc:	08 95       	ret
 9de:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_zero>
 9e2:	67 2f       	mov	r22, r23
 9e4:	78 2f       	mov	r23, r24
 9e6:	88 27       	eor	r24, r24
 9e8:	b8 5f       	subi	r27, 0xF8	; 248
 9ea:	39 f0       	breq	.+14     	; 0x9fa <__fixunssfsi+0x4c>
 9ec:	b9 3f       	cpi	r27, 0xF9	; 249
 9ee:	cc f3       	brlt	.-14     	; 0x9e2 <__fixunssfsi+0x34>
 9f0:	86 95       	lsr	r24
 9f2:	77 95       	ror	r23
 9f4:	67 95       	ror	r22
 9f6:	b3 95       	inc	r27
 9f8:	d9 f7       	brne	.-10     	; 0x9f0 <__fixunssfsi+0x42>
 9fa:	3e f4       	brtc	.+14     	; 0xa0a <__fixunssfsi+0x5c>
 9fc:	90 95       	com	r25
 9fe:	80 95       	com	r24
 a00:	70 95       	com	r23
 a02:	61 95       	neg	r22
 a04:	7f 4f       	sbci	r23, 0xFF	; 255
 a06:	8f 4f       	sbci	r24, 0xFF	; 255
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	08 95       	ret

00000a0c <__floatunsisf>:
 a0c:	e8 94       	clt
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <__floatsisf+0x12>

00000a10 <__floatsisf>:
 a10:	97 fb       	bst	r25, 7
 a12:	3e f4       	brtc	.+14     	; 0xa22 <__floatsisf+0x12>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	99 23       	and	r25, r25
 a24:	a9 f0       	breq	.+42     	; 0xa50 <__floatsisf+0x40>
 a26:	f9 2f       	mov	r31, r25
 a28:	96 e9       	ldi	r25, 0x96	; 150
 a2a:	bb 27       	eor	r27, r27
 a2c:	93 95       	inc	r25
 a2e:	f6 95       	lsr	r31
 a30:	87 95       	ror	r24
 a32:	77 95       	ror	r23
 a34:	67 95       	ror	r22
 a36:	b7 95       	ror	r27
 a38:	f1 11       	cpse	r31, r1
 a3a:	f8 cf       	rjmp	.-16     	; 0xa2c <__floatsisf+0x1c>
 a3c:	fa f4       	brpl	.+62     	; 0xa7c <__floatsisf+0x6c>
 a3e:	bb 0f       	add	r27, r27
 a40:	11 f4       	brne	.+4      	; 0xa46 <__floatsisf+0x36>
 a42:	60 ff       	sbrs	r22, 0
 a44:	1b c0       	rjmp	.+54     	; 0xa7c <__floatsisf+0x6c>
 a46:	6f 5f       	subi	r22, 0xFF	; 255
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	16 c0       	rjmp	.+44     	; 0xa7c <__floatsisf+0x6c>
 a50:	88 23       	and	r24, r24
 a52:	11 f0       	breq	.+4      	; 0xa58 <__floatsisf+0x48>
 a54:	96 e9       	ldi	r25, 0x96	; 150
 a56:	11 c0       	rjmp	.+34     	; 0xa7a <__floatsisf+0x6a>
 a58:	77 23       	and	r23, r23
 a5a:	21 f0       	breq	.+8      	; 0xa64 <__floatsisf+0x54>
 a5c:	9e e8       	ldi	r25, 0x8E	; 142
 a5e:	87 2f       	mov	r24, r23
 a60:	76 2f       	mov	r23, r22
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <__floatsisf+0x5e>
 a64:	66 23       	and	r22, r22
 a66:	71 f0       	breq	.+28     	; 0xa84 <__floatsisf+0x74>
 a68:	96 e8       	ldi	r25, 0x86	; 134
 a6a:	86 2f       	mov	r24, r22
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	2a f0       	brmi	.+10     	; 0xa7c <__floatsisf+0x6c>
 a72:	9a 95       	dec	r25
 a74:	66 0f       	add	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	da f7       	brpl	.-10     	; 0xa72 <__floatsisf+0x62>
 a7c:	88 0f       	add	r24, r24
 a7e:	96 95       	lsr	r25
 a80:	87 95       	ror	r24
 a82:	97 f9       	bld	r25, 7
 a84:	08 95       	ret

00000a86 <__fp_inf>:
 a86:	97 f9       	bld	r25, 7
 a88:	9f 67       	ori	r25, 0x7F	; 127
 a8a:	80 e8       	ldi	r24, 0x80	; 128
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	60 e0       	ldi	r22, 0x00	; 0
 a90:	08 95       	ret

00000a92 <__fp_nan>:
 a92:	9f ef       	ldi	r25, 0xFF	; 255
 a94:	80 ec       	ldi	r24, 0xC0	; 192
 a96:	08 95       	ret

00000a98 <__fp_pscA>:
 a98:	00 24       	eor	r0, r0
 a9a:	0a 94       	dec	r0
 a9c:	16 16       	cp	r1, r22
 a9e:	17 06       	cpc	r1, r23
 aa0:	18 06       	cpc	r1, r24
 aa2:	09 06       	cpc	r0, r25
 aa4:	08 95       	ret

00000aa6 <__fp_pscB>:
 aa6:	00 24       	eor	r0, r0
 aa8:	0a 94       	dec	r0
 aaa:	12 16       	cp	r1, r18
 aac:	13 06       	cpc	r1, r19
 aae:	14 06       	cpc	r1, r20
 ab0:	05 06       	cpc	r0, r21
 ab2:	08 95       	ret

00000ab4 <__fp_round>:
 ab4:	09 2e       	mov	r0, r25
 ab6:	03 94       	inc	r0
 ab8:	00 0c       	add	r0, r0
 aba:	11 f4       	brne	.+4      	; 0xac0 <__fp_round+0xc>
 abc:	88 23       	and	r24, r24
 abe:	52 f0       	brmi	.+20     	; 0xad4 <__fp_round+0x20>
 ac0:	bb 0f       	add	r27, r27
 ac2:	40 f4       	brcc	.+16     	; 0xad4 <__fp_round+0x20>
 ac4:	bf 2b       	or	r27, r31
 ac6:	11 f4       	brne	.+4      	; 0xacc <__fp_round+0x18>
 ac8:	60 ff       	sbrs	r22, 0
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <__fp_round+0x20>
 acc:	6f 5f       	subi	r22, 0xFF	; 255
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__fp_split3>:
 ad6:	57 fd       	sbrc	r21, 7
 ad8:	90 58       	subi	r25, 0x80	; 128
 ada:	44 0f       	add	r20, r20
 adc:	55 1f       	adc	r21, r21
 ade:	59 f0       	breq	.+22     	; 0xaf6 <__fp_splitA+0x10>
 ae0:	5f 3f       	cpi	r21, 0xFF	; 255
 ae2:	71 f0       	breq	.+28     	; 0xb00 <__fp_splitA+0x1a>
 ae4:	47 95       	ror	r20

00000ae6 <__fp_splitA>:
 ae6:	88 0f       	add	r24, r24
 ae8:	97 fb       	bst	r25, 7
 aea:	99 1f       	adc	r25, r25
 aec:	61 f0       	breq	.+24     	; 0xb06 <__fp_splitA+0x20>
 aee:	9f 3f       	cpi	r25, 0xFF	; 255
 af0:	79 f0       	breq	.+30     	; 0xb10 <__fp_splitA+0x2a>
 af2:	87 95       	ror	r24
 af4:	08 95       	ret
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	14 06       	cpc	r1, r20
 afc:	55 1f       	adc	r21, r21
 afe:	f2 cf       	rjmp	.-28     	; 0xae4 <__fp_split3+0xe>
 b00:	46 95       	lsr	r20
 b02:	f1 df       	rcall	.-30     	; 0xae6 <__fp_splitA>
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <__fp_splitA+0x30>
 b06:	16 16       	cp	r1, r22
 b08:	17 06       	cpc	r1, r23
 b0a:	18 06       	cpc	r1, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	f1 cf       	rjmp	.-30     	; 0xaf2 <__fp_splitA+0xc>
 b10:	86 95       	lsr	r24
 b12:	71 05       	cpc	r23, r1
 b14:	61 05       	cpc	r22, r1
 b16:	08 94       	sec
 b18:	08 95       	ret

00000b1a <__fp_zero>:
 b1a:	e8 94       	clt

00000b1c <__fp_szero>:
 b1c:	bb 27       	eor	r27, r27
 b1e:	66 27       	eor	r22, r22
 b20:	77 27       	eor	r23, r23
 b22:	cb 01       	movw	r24, r22
 b24:	97 f9       	bld	r25, 7
 b26:	08 95       	ret

00000b28 <__mulsf3>:
 b28:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__mulsf3x>
 b2c:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 b30:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 b34:	38 f0       	brcs	.+14     	; 0xb44 <__mulsf3+0x1c>
 b36:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 b3a:	20 f0       	brcs	.+8      	; 0xb44 <__mulsf3+0x1c>
 b3c:	95 23       	and	r25, r21
 b3e:	11 f0       	breq	.+4      	; 0xb44 <__mulsf3+0x1c>
 b40:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 b44:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>
 b48:	11 24       	eor	r1, r1
 b4a:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>

00000b4e <__mulsf3x>:
 b4e:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 b52:	70 f3       	brcs	.-36     	; 0xb30 <__mulsf3+0x8>

00000b54 <__mulsf3_pse>:
 b54:	95 9f       	mul	r25, r21
 b56:	c1 f3       	breq	.-16     	; 0xb48 <__mulsf3+0x20>
 b58:	95 0f       	add	r25, r21
 b5a:	50 e0       	ldi	r21, 0x00	; 0
 b5c:	55 1f       	adc	r21, r21
 b5e:	62 9f       	mul	r22, r18
 b60:	f0 01       	movw	r30, r0
 b62:	72 9f       	mul	r23, r18
 b64:	bb 27       	eor	r27, r27
 b66:	f0 0d       	add	r31, r0
 b68:	b1 1d       	adc	r27, r1
 b6a:	63 9f       	mul	r22, r19
 b6c:	aa 27       	eor	r26, r26
 b6e:	f0 0d       	add	r31, r0
 b70:	b1 1d       	adc	r27, r1
 b72:	aa 1f       	adc	r26, r26
 b74:	64 9f       	mul	r22, r20
 b76:	66 27       	eor	r22, r22
 b78:	b0 0d       	add	r27, r0
 b7a:	a1 1d       	adc	r26, r1
 b7c:	66 1f       	adc	r22, r22
 b7e:	82 9f       	mul	r24, r18
 b80:	22 27       	eor	r18, r18
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	62 1f       	adc	r22, r18
 b88:	73 9f       	mul	r23, r19
 b8a:	b0 0d       	add	r27, r0
 b8c:	a1 1d       	adc	r26, r1
 b8e:	62 1f       	adc	r22, r18
 b90:	83 9f       	mul	r24, r19
 b92:	a0 0d       	add	r26, r0
 b94:	61 1d       	adc	r22, r1
 b96:	22 1f       	adc	r18, r18
 b98:	74 9f       	mul	r23, r20
 b9a:	33 27       	eor	r19, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	23 1f       	adc	r18, r19
 ba2:	84 9f       	mul	r24, r20
 ba4:	60 0d       	add	r22, r0
 ba6:	21 1d       	adc	r18, r1
 ba8:	82 2f       	mov	r24, r18
 baa:	76 2f       	mov	r23, r22
 bac:	6a 2f       	mov	r22, r26
 bae:	11 24       	eor	r1, r1
 bb0:	9f 57       	subi	r25, 0x7F	; 127
 bb2:	50 40       	sbci	r21, 0x00	; 0
 bb4:	9a f0       	brmi	.+38     	; 0xbdc <__mulsf3_pse+0x88>
 bb6:	f1 f0       	breq	.+60     	; 0xbf4 <__mulsf3_pse+0xa0>
 bb8:	88 23       	and	r24, r24
 bba:	4a f0       	brmi	.+18     	; 0xbce <__mulsf3_pse+0x7a>
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	bb 1f       	adc	r27, r27
 bc2:	66 1f       	adc	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	91 50       	subi	r25, 0x01	; 1
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	a9 f7       	brne	.-22     	; 0xbb8 <__mulsf3_pse+0x64>
 bce:	9e 3f       	cpi	r25, 0xFE	; 254
 bd0:	51 05       	cpc	r21, r1
 bd2:	80 f0       	brcs	.+32     	; 0xbf4 <__mulsf3_pse+0xa0>
 bd4:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 bd8:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 bdc:	5f 3f       	cpi	r21, 0xFF	; 255
 bde:	e4 f3       	brlt	.-8      	; 0xbd8 <__mulsf3_pse+0x84>
 be0:	98 3e       	cpi	r25, 0xE8	; 232
 be2:	d4 f3       	brlt	.-12     	; 0xbd8 <__mulsf3_pse+0x84>
 be4:	86 95       	lsr	r24
 be6:	77 95       	ror	r23
 be8:	67 95       	ror	r22
 bea:	b7 95       	ror	r27
 bec:	f7 95       	ror	r31
 bee:	e7 95       	ror	r30
 bf0:	9f 5f       	subi	r25, 0xFF	; 255
 bf2:	c1 f7       	brne	.-16     	; 0xbe4 <__mulsf3_pse+0x90>
 bf4:	fe 2b       	or	r31, r30
 bf6:	88 0f       	add	r24, r24
 bf8:	91 1d       	adc	r25, r1
 bfa:	96 95       	lsr	r25
 bfc:	87 95       	ror	r24
 bfe:	97 f9       	bld	r25, 7
 c00:	08 95       	ret

00000c02 <_exit>:
 c02:	f8 94       	cli

00000c04 <__stop_program>:
 c04:	ff cf       	rjmp	.-2      	; 0xc04 <__stop_program>
